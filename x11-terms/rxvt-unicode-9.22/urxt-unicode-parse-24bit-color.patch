diff -Naru rxvt-unicode-9.22.orig/src/command.C rxvt-unicode-9.22/src/command.C
--- rxvt-unicode-9.22.orig/src/command.C	2018-09-14 14:03:04.371498837 +0200
+++ rxvt-unicode-9.22/src/command.C	2018-09-14 14:05:25.121500759 +0200
@@ -1789,6 +1789,9 @@
 #if ENABLE_FRILLS
       if (option (Opt_urgentOnBell))
         set_urgency (0);
+
+      if (priv_modes & PrivMode_FocusEvent)
+        tt_printf ("\x1b[I");
 #endif
 
       HOOK_INVOKE ((this, HOOK_FOCUS_IN, DT_END));
@@ -1806,6 +1809,9 @@
 #if ENABLE_FRILLS
       if (option (Opt_urgentOnBell))
         set_urgency (0);
+
+      if (priv_modes & PrivMode_FocusEvent)
+        tt_printf ("\x1b[O");
 #endif
 #if ENABLE_FRILLS || ISO_14755
       if (iso14755buf)
@@ -3330,6 +3336,31 @@
     }
 }
 
+/*
+ * Find the nearest color slot in the hidden color cube,
+ * adapt its value to the 24bit RGB color.
+ */
+unsigned int
+rxvt_term::map_rgb24_color (unsigned int r, unsigned int g, unsigned int b)
+{
+  unsigned int idx_r = (r & 0xff) / (0xff / (Red_levels - 1));
+  unsigned int idx_g = (g & 0xff) / (0xff / (Green_levels - 1));
+  unsigned int idx_b = (b & 0xff) / (0xff / (Blue_levels - 1));
+  unsigned int idx;
+
+  idx = minTermCOLOR24 + idx_r * Blue_levels * Green_levels +
+                         idx_g * Blue_levels +
+                         idx_b;
+
+  pix_colors_focused [idx].free (this);
+  pix_colors_focused [idx].set (this, rgba (r * 0x0101,
+                                            g * 0x0101,
+                                            b * 0x0101));
+  update_fade_color (idx, false);
+
+  return idx;
+}
+
 void
 rxvt_term::process_color_seq (int report, int color, const char *str, char resp)
 {
@@ -3709,6 +3740,7 @@
                   { 1002, PrivMode_MouseBtnEvent },
                   { 1003, PrivMode_MouseAnyEvent },
 #if ENABLE_FRILLS
+                  { 1004, PrivMode_FocusEvent },
                   { 1005, PrivMode_ExtModeMouse },
 #endif
                   { 1010, PrivMode_TtyOutputInh }, // rxvt extension
@@ -3971,6 +4003,15 @@
                 scr_color ((unsigned int) (minCOLOR + arg[i + 2]), Color_fg);
                 i += 2;
               }
+            else if (nargs > i + 4 && arg[i + 1] == 2)
+              {
+                unsigned int r = arg[i + 2];
+                unsigned int g = arg[i + 3];
+                unsigned int b = arg[i + 4];
+                unsigned int idx = map_rgb24_color (r, g, b);
+                scr_color (idx, Color_fg);
+                i += 4;
+              }
             break;
           case 39:		/* default fg */
             scr_color (Color_fg, Color_fg);
@@ -3992,6 +4033,15 @@
                 scr_color ((unsigned int) (minCOLOR + arg[i + 2]), Color_bg);
                 i += 2;
               }
+            else if (nargs > i + 4 && arg[i + 1] == 2)
+              {
+                unsigned int r = arg[i + 2];
+                unsigned int g = arg[i + 3];
+                unsigned int b = arg[i + 4];
+                unsigned int idx = map_rgb24_color (r, g, b);
+                scr_color (idx, Color_bg);
+                i += 4;
+              }
             break;
           case 49:		/* default bg */
             scr_color (Color_bg, Color_bg);
